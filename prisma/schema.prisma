// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Order {
  id           String      @id @default(cuid())
  orderNumber  String      @unique
  userId       String
  status       OrderStatus @default(PENDING)
  // Financial
  total        Decimal     @db.Decimal(10, 2)
  subtotal     Decimal     @db.Decimal(10, 2)
  tax          Decimal     @db.Decimal(10, 2)
  discount     Decimal     @default(0) @db.Decimal(10, 2)
  shipping     Decimal     @db.Decimal(10, 2)
  //
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  createdBy    String?
  updatedBy    String?
  // Shipping Address
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String
  //
  user         User        @relation(fields: [userId], references: [id])
  lineItems    LineItem[]
  payments     Payment[]
  shipments    Shipment[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model LineItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  discount  Decimal  @default(0) @db.Decimal(10, 2)
  product   Product  @relation(fields: [productId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  updatedBy String?

  @@index([orderId])
}

model User {
  id            String       @id @default(cuid())
  email         String       @unique
  name          String
  phoneNumber   String?
  orders        Order[]
  userAddressId String?      @unique
  userAddress   UserAddress? @relation(fields: [userAddressId], references: [id])
}

model Payment {
  id              String        @id @default(cuid())
  status          PaymentStatus
  amount          Decimal       @db.Decimal(10, 2)
  currency        String        @default("usd")
  paymentIntentId String        @unique // Stripe
  customerId      String // Stripe
  chargeId        String? // Stripe important for disputes
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  paidAt          DateTime?
  orderId         String
  order           Order         @relation(fields: [orderId], references: [id])
  refunds         Refund[]
  metadata        Json? //  extra Stripe metadata
  receiptUrl      String? // Stripe
  paymentMethod   String?

  @@index([paymentIntentId])
  @@index([status])
}

model Refund {
  id              String       @id @default(cuid())
  payment         Payment      @relation(fields: [paymentId], references: [id])
  paymentId       String
  amount          Decimal
  reason          String?
  status          RefundStatus
  paymentIntentId String
  createdAt       DateTime     @default(now())
}

model Shipment {
  id             String         @id @default(cuid())
  orderId        String
  order          Order          @relation(fields: [orderId], references: [id])
  trackingNumber String
  carrier        String
  trackingUrl    String?
  shippedAt      DateTime
  status         ShipmentStatus @default(PENDING)
  createdAt      DateTime       @default(now())
  createdBy      String?
  updatedBy      String?

  @@index([orderId])
}

model UserAddress {
  id           String   @id @default(cuid())
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String
  isDefault    Boolean
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  //
  user         User[]
}

model Product {
  id           String         @id @default(cuid())
  name         String
  description  String?
  price        Decimal        @db.Decimal(10, 2)
  stock        Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  createdBy    String?
  updatedBy    String?
  lineItems    LineItem[]
  ProductImage ProductImage[]
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  imageUrl  String
  order     Int // Order in which the image should appear for the product
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([productId, order])
  @@index([productId, order])
}

model ChangeLog {
  id            String     @id @default(cuid())
  modelName     String
  modelId       String
  changeType    ChangeType
  changeDate    DateTime   @default(now())
  changedBy     String
  changeDetails String
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  PARTIALLY_SHIPPED
  SHIPPED
  PARTIALLY_REFUNDED
  REFUNDED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  REQUIRES_ACTION
  CANCELED
  REFUNDED
}

enum ShipmentStatus {
  PENDING
  AWAITING_PICKUP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  DELAYED
  FAILED
  RETURNED
}

enum ChangeType {
  CREATED
  UPDATED
  DELETED
}

enum RefundStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELED
}
